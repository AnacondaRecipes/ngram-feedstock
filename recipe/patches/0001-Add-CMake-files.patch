From 931bb6f2dea7141b5abf898391e752f8f1c4ca25 Mon Sep 17 00:00:00 2001
From: Michael McAuliffe <michael.e.mcauliffe@gmail.com>
Date: Sat, 16 Jul 2022 11:39:26 -0700
Subject: [PATCH] Add CMake files

---
 .gitattributes                         | 18 +++++++
 CMakeLists.txt                         | 37 +++++++++++++++
 src/CMakeLists.txt                     | 11 +++++
 src/bin/CMakeLists.txt                 | 53 +++++++++++++++++++++
 src/bin/ngramapply-main.cc             |  1 +
 src/bin/ngramcount-main.cc             |  7 ++-
 src/bin/ngramdisttrain.sh              |  0
 src/bin/ngramfractrain.sh              |  0
 src/bin/ngraminfo-main.cc              |  8 +++-
 src/bin/ngramperplexity-main.cc        |  8 +++-
 src/bin/ngramprint-main.cc             |  8 +++-
 src/bin/ngramrandgen-main.cc           |  5 ++
 src/bin/ngramrandgen.cc                |  5 ++
 src/bin/ngramread-main.cc              | 18 +++++--
 src/bin/ngramread.cc                   |  4 +-
 src/bin/ngramshrink-main.cc            |  2 +-
 src/bin/ngramsymbols-main.cc           | 12 ++++-
 src/include/ngram/ngram-count.h        |  1 +
 src/include/ngram/ngram-output.h       |  5 ++
 src/include/ngram/ngram-randgen.h      |  5 ++
 src/lib/CMakeLists.txt                 | 65 ++++++++++++++++++++++++++
 src/lib/ngram-context.cc               | 13 +++++-
 src/lib/ngram-output.cc                |  3 --
 src/test/CMakeLists.txt                | 42 +++++++++++++++++
 src/test/disttestsetup.sh              |  0
 src/test/ngramapply_test.sh            |  0
 src/test/ngramcount_histograms_test.sh |  0
 src/test/ngramcount_test.sh            |  0
 src/test/ngramdistcount_test.sh        |  0
 src/test/ngramdistmake_test.sh         |  0
 src/test/ngramdistrand.sh              |  0
 src/test/ngramdistshrink_test.sh       |  0
 src/test/ngramdistwittenbell_test.sh   |  0
 src/test/ngramfracdistmake_test.sh     |  0
 src/test/ngramfracdistshrink_test.sh   |  0
 src/test/ngramhisttest-main.cc         |  8 +++-
 src/test/ngraminfo_test.sh             |  0
 src/test/ngrammake_test.sh             |  0
 src/test/ngrammarginalize_test.sh      |  0
 src/test/ngrammerge_test.sh            |  0
 src/test/ngramperplexity_test.sh       |  0
 src/test/ngramprint_test.sh            |  0
 src/test/ngramrand_test.sh             |  0
 src/test/ngramrandgen_test.sh          |  0
 src/test/ngramrandtest-main.cc         | 10 +++-
 src/test/ngramrandtest.cc              |  5 ++
 src/test/ngramshrink_test.sh           |  0
 src/test/ngramsymbols_test.sh          |  0
 48 files changed, 332 insertions(+), 22 deletions(-)
 create mode 100644 .gitattributes
 create mode 100644 CMakeLists.txt
 create mode 100644 src/CMakeLists.txt
 create mode 100644 src/bin/CMakeLists.txt
 mode change 100755 => 100644 src/bin/ngramdisttrain.sh
 mode change 100755 => 100644 src/bin/ngramfractrain.sh
 create mode 100644 src/lib/CMakeLists.txt
 create mode 100644 src/test/CMakeLists.txt
 mode change 100755 => 100644 src/test/disttestsetup.sh
 mode change 100755 => 100644 src/test/ngramapply_test.sh
 mode change 100755 => 100644 src/test/ngramcount_histograms_test.sh
 mode change 100755 => 100644 src/test/ngramcount_test.sh
 mode change 100755 => 100644 src/test/ngramdistcount_test.sh
 mode change 100755 => 100644 src/test/ngramdistmake_test.sh
 mode change 100755 => 100644 src/test/ngramdistrand.sh
 mode change 100755 => 100644 src/test/ngramdistshrink_test.sh
 mode change 100755 => 100644 src/test/ngramdistwittenbell_test.sh
 mode change 100755 => 100644 src/test/ngramfracdistmake_test.sh
 mode change 100755 => 100644 src/test/ngramfracdistshrink_test.sh
 mode change 100755 => 100644 src/test/ngraminfo_test.sh
 mode change 100755 => 100644 src/test/ngrammake_test.sh
 mode change 100755 => 100644 src/test/ngrammarginalize_test.sh
 mode change 100755 => 100644 src/test/ngrammerge_test.sh
 mode change 100755 => 100644 src/test/ngramperplexity_test.sh
 mode change 100755 => 100644 src/test/ngramprint_test.sh
 mode change 100755 => 100644 src/test/ngramrand_test.sh
 mode change 100755 => 100644 src/test/ngramrandgen_test.sh
 mode change 100755 => 100644 src/test/ngramshrink_test.sh
 mode change 100755 => 100644 src/test/ngramsymbols_test.sh

diff --git a/.gitattributes b/.gitattributes
new file mode 100644
index 0000000..02a8638
--- /dev/null
+++ b/.gitattributes
@@ -0,0 +1,18 @@
+*.php text
+        *.css text
+        *.js text
+        *.json text
+        *.htm text
+        *.html text
+        *.xml text
+        *.txt text
+        *.pyx text
+        *.inc text
+        *.cpp text
+        *.pxd text
+        *.in text
+        *.am text
+        *.sh text
+        *.h text
+        *.cc text
+
diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..29591c3
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,37 @@
+project(ngram)
+cmake_minimum_required(VERSION 3.18)
+
+include(GNUInstallDirs)
+include(GenerateExportHeader)
+set(CMAKE_MACOSX_RPATH 1)
+set(CMAKE_CXX_STANDARD 17)
+set(CMAKE_CXX_EXTENSIONS OFF)
+option(BUILD_SHARED_LIBS "Build shared libraries" ON)
+option(NGRAM_BUILD_TEST "Build ngram tests" OFF)
+
+include_directories(${CMAKE_PREFIX_PATH}/include)
+link_directories(${CMAKE_PREFIX_PATH}/lib)
+
+set(CMAKE_POSITION_INDEPENDENT_CODE ON)
+if (MSVC)
+    find_package(dlfcn-win32 REQUIRED)
+    set(CMAKE_DL_LIBS dlfcn-win32::dl)
+    set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
+    add_definitions(-DWIN32_LEAN_AND_MEAN)
+    add_definitions(-DNOMINMAX)
+    add_definitions(-D_SILENCE_ALL_CXX17_DEPRECATION_WARNINGS)
+    add_definitions(-D_USE_MATH_DEFINES)
+    add_compile_options(/permissive- /FS /wd4819 /EHsc /bigobj)
+
+    # some warnings related with fst
+    add_compile_options(/wd4018 /wd4244 /wd4267 /wd4291 /wd4305)
+endif (MSVC)
+
+set(SOVERSION "1314")
+
+if (NGRAM_BUILD_TEST)
+    include(CTest)
+    enable_testing()
+endif()
+
+add_subdirectory(src)
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
new file mode 100644
index 0000000..c8c3d8d
--- /dev/null
+++ b/src/CMakeLists.txt
@@ -0,0 +1,11 @@
+include_directories(./include/)
+install(DIRECTORY include/ DESTINATION include/
+        FILES_MATCHING PATTERN "*.h")
+
+add_subdirectory(lib)
+
+add_subdirectory(bin)
+
+if (${NGRAM_BUILD_TEST})
+add_subdirectory(test)
+endif()
\ No newline at end of file
diff --git a/src/bin/CMakeLists.txt b/src/bin/CMakeLists.txt
new file mode 100644
index 0000000..d11f3c1
--- /dev/null
+++ b/src/bin/CMakeLists.txt
@@ -0,0 +1,53 @@
+function (add_executable2 _name)
+    add_executable(${ARGV})
+    if (TARGET ${_name})
+        target_link_libraries(${_name} ngram fstfarscript fstfar fstscript fstlinearscript fst ${CMAKE_DL_LIBS})
+        set_target_properties(${_name} PROPERTIES FOLDER bin)
+    endif()
+
+    install(TARGETS ${_name} RUNTIME DESTINATION bin)
+endfunction()
+
+function (add_executable2_hist _name)
+    add_executable(${ARGV})
+    if (TARGET ${_name})
+        target_link_libraries(${_name} ngramhist ngram fstfarscript fstfar fstscript fstlinearscript fst ${CMAKE_DL_LIBS})
+        set_target_properties(${_name} PROPERTIES FOLDER bin)
+    endif()
+
+    install(TARGETS ${_name} RUNTIME DESTINATION bin)
+endfunction()
+
+include_directories(../include)
+
+add_executable2(ngramapply ngramapply-main.cc ngramapply.cc)
+
+add_executable2(ngramcontext ngramcontext-main.cc ngramcontext.cc)
+
+add_executable2_hist(ngramcount ngramcount-main.cc ngramcount.cc)
+
+add_executable2(ngraminfo ngraminfo-main.cc ngraminfo.cc)
+
+add_executable2_hist(ngrammake ngrammake-main.cc ngrammake.cc)
+
+add_executable2(ngrammarginalize ngrammarginalize-main.cc ngrammarginalize.cc)
+
+add_executable2_hist(ngrammerge ngrammerge-main.cc ngrammerge.cc)
+
+add_executable2(ngramperplexity ngramperplexity-main.cc ngramperplexity.cc)
+
+add_executable2(ngramprint ngramprint-main.cc ngramprint.cc)
+
+add_executable2(ngramrandgen ngramrandgen-main.cc ngramrandgen.cc)
+
+add_executable2(ngramread ngramread-main.cc ngramread.cc)
+
+add_executable2(ngramshrink ngramshrink-main.cc ngramshrink.cc)
+
+add_executable2(ngramsort ngramsort-main.cc ngramsort.cc)
+
+add_executable2_hist(ngramsplit ngramsplit-main.cc ngramsplit.cc)
+
+add_executable2(ngramsymbols ngramsymbols-main.cc ngramsymbols.cc)
+
+add_executable2_hist(ngramtransfer ngramtransfer-main.cc ngramtransfer.cc)
diff --git a/src/bin/ngramapply-main.cc b/src/bin/ngramapply-main.cc
index 7e9a22c..2428359 100644
--- a/src/bin/ngramapply-main.cc
+++ b/src/bin/ngramapply-main.cc
@@ -19,6 +19,7 @@
 #include <string>
 
 #include <fst/flags.h>
+#include <fst/symbol-table.h>
 #include <fst/extensions/far/far.h>
 #include <fst/fst.h>
 #include <ngram/lexicographic-map.h>
diff --git a/src/bin/ngramcount-main.cc b/src/bin/ngramcount-main.cc
index 9a8010d..582a85b 100644
--- a/src/bin/ngramcount-main.cc
+++ b/src/bin/ngramcount-main.cc
@@ -16,6 +16,8 @@
 // Counts n-grams from an input fst archive (FAR) file.
 
 #include <fstream>
+#include <io.h>
+#include <fcntl.h>
 #include <iostream>
 #include <memory>
 #include <string>
@@ -95,12 +97,15 @@ int ngramcount_main(int argc, char **argv) {
           FST_FLAGS_add_to_symbol_unigram_count);
       std::ofstream ofstrm;
       if (!out_name.empty()) {
-        ofstrm.open(out_name);
+        ofstrm.open(out_name, std::ios_base::out | std::ios_base::binary);
         if (!ofstrm) {
           LOG(ERROR) << "GetNGramCounts: Open failed, file = " << out_name;
           return 1;
         }
       }
+      if (!ofstrm.is_open()) {
+          _setmode(_fileno(stdout), _O_BINARY);
+      }
       std::ostream &ostrm = ofstrm.is_open() ? ofstrm : std::cout;
       for (size_t i = 0; i < ngram_counts.size(); ++i)
         ostrm << ngram_counts[i] << std::endl;
diff --git a/src/bin/ngramdisttrain.sh b/src/bin/ngramdisttrain.sh
old mode 100755
new mode 100644
diff --git a/src/bin/ngramfractrain.sh b/src/bin/ngramfractrain.sh
old mode 100755
new mode 100644
diff --git a/src/bin/ngraminfo-main.cc b/src/bin/ngraminfo-main.cc
index 5573f7d..64bad1d 100644
--- a/src/bin/ngraminfo-main.cc
+++ b/src/bin/ngraminfo-main.cc
@@ -21,6 +21,9 @@
 #include <ostream>
 #include <sstream>
 #include <string>
+#include <io.h>
+#include <fcntl.h>
+#include <iostream>
 
 #include <fst/flags.h>
 #include <fst/vector-fst.h>
@@ -110,12 +113,15 @@ int ngraminfo_main(int argc, char **argv) {
 
   std::ofstream ofstrm;
   if (argc > 2 && (strcmp(argv[2], "-") != 0)) {
-    ofstrm.open(argv[2]);
+    ofstrm.open(argv[2], std::ios_base::out | std::ios_base::binary);
     if (!ofstrm) {
       LOG(ERROR) << argv[0] << ": Open failed, file = " << argv[2];
       return 1;
     }
   }
+  if (!ofstrm.is_open()) {
+      _setmode(_fileno(stdout), _O_BINARY);
+  }
   std::ostream &ostrm = ofstrm.is_open() ? ofstrm : std::cout;
   ngram::NGramModel<fst::StdArc> ngram(
       *fst, 0, FST_FLAGS_norm_eps,
diff --git a/src/bin/ngramperplexity-main.cc b/src/bin/ngramperplexity-main.cc
index 08a0ee3..ee3d58a 100644
--- a/src/bin/ngramperplexity-main.cc
+++ b/src/bin/ngramperplexity-main.cc
@@ -20,6 +20,9 @@
 #include <ostream>
 #include <string>
 #include <vector>
+#include <io.h>
+#include <fcntl.h>
+#include <iostream>
 
 #include <fst/flags.h>
 #include <fst/extensions/far/far.h>
@@ -56,12 +59,15 @@ int ngramperplexity_main(int argc, char **argv) {
 
   std::ofstream ofstrm;
   if (argc > 3 && (strcmp(argv[3], "-") != 0)) {
-    ofstrm.open(argv[3]);
+    ofstrm.open(argv[3], std::ios_base::out | std::ios_base::binary);
     if (!ofstrm) {
       LOG(ERROR) << argv[0] << ": Open failed, file = " << argv[3];
       return 1;
     }
   }
+  if (!ofstrm.is_open()) {
+      _setmode(_fileno(stdout), _O_BINARY);
+  }
   std::ostream &ostrm = ofstrm.is_open() ? ofstrm : std::cout;
 
   ngram::NGramOutput ngram(fst.get(), ostrm, 0, false,
diff --git a/src/bin/ngramprint-main.cc b/src/bin/ngramprint-main.cc
index 20c0bd3..bace07c 100644
--- a/src/bin/ngramprint-main.cc
+++ b/src/bin/ngramprint-main.cc
@@ -19,6 +19,9 @@
 #include <memory>
 #include <ostream>
 #include <string>
+#include <io.h>
+#include <fcntl.h>
+#include <iostream>
 
 #include <fst/flags.h>
 #include <ngram/ngram-output.h>
@@ -65,12 +68,15 @@ int ngramprint_main(int argc, char **argv) {
 
   std::ofstream ofstrm;
   if (argc > 2 && (strcmp(argv[2], "-") != 0)) {
-    ofstrm.open(argv[2]);
+    ofstrm.open(argv[2], std::ios_base::out | std::ios_base::binary);
     if (!ofstrm) {
       LOG(ERROR) << argv[0] << ": Open failed, file = " << argv[2];
       return 1;
     }
   }
+  if (!ofstrm.is_open()) {
+      _setmode(_fileno(stdout), _O_BINARY);
+  }
   std::ostream &ostrm = ofstrm.is_open() ? ofstrm : std::cout;
 
   ngram::NGramOutput ngram(fst.get(), ostrm, FST_FLAGS_backoff_label,
diff --git a/src/bin/ngramrandgen-main.cc b/src/bin/ngramrandgen-main.cc
index 6f5f80e..1f8cb96 100644
--- a/src/bin/ngramrandgen-main.cc
+++ b/src/bin/ngramrandgen-main.cc
@@ -16,7 +16,12 @@
 // Generates random sentences from an LM or more generally paths through any
 // FST where epsilons are treated as failure transitions.
 
+
+#ifdef _WIN32
+#include <io.h>         // for _get_osfhandle, _open
+#else
 #include <unistd.h>
+#endif  // _WIN32
 
 #include <cstdlib>
 #include <memory>
diff --git a/src/bin/ngramrandgen.cc b/src/bin/ngramrandgen.cc
index 8689bee..b1df7b7 100644
--- a/src/bin/ngramrandgen.cc
+++ b/src/bin/ngramrandgen.cc
@@ -13,7 +13,12 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 //
+
+#ifdef _WIN32
+#include <io.h>         // for _get_osfhandle, _open
+#else
 #include <unistd.h>
+#endif  // _WIN32
 
 #include <climits>
 
diff --git a/src/bin/ngramread-main.cc b/src/bin/ngramread-main.cc
index b8933e4..29118ee 100644
--- a/src/bin/ngramread-main.cc
+++ b/src/bin/ngramread-main.cc
@@ -16,10 +16,14 @@
 // Reads textual model representations and produces n-gram model FST.
 
 #include <fstream>
-#include <iostream>
 #include <string>
+#include <io.h>
+#include <fcntl.h>
+#include <iostream>
 
 #include <fst/flags.h>
+#include <fst/exports/exports.h>
+#include <fst/extensions/linear/linearscript.h>
 #include <ngram/ngram-input.h>
 
 DECLARE_bool(ARPA);
@@ -27,8 +31,6 @@ DECLARE_bool(renormalize_arpa);
 DECLARE_string(symbols);
 DECLARE_string(epsilon_symbol);
 DECLARE_string(OOV_symbol);
-DECLARE_string(start_symbol);  // defined in ngram-output.cc
-DECLARE_string(end_symbol);    // defined in ngram-output.cc
 
 int ngramread_main(int argc, char **argv) {
   std::string usage = "Transform text formats to FST.\n\n  Usage: ";
@@ -44,22 +46,28 @@ int ngramread_main(int argc, char **argv) {
 
   std::ifstream ifstrm;
   if (argc > 1 && (strcmp(argv[1], "-") != 0)) {
-    ifstrm.open(argv[1]);
+    ifstrm.open(argv[1], std::ios_base::in | std::ios_base::binary);
     if (!ifstrm) {
       LOG(ERROR) << argv[0] << ": Open failed: " << argv[1];
       return 1;
     }
   }
+  if (!ifstrm.is_open()) {
+      _setmode(_fileno(stdin), _O_BINARY);
+  }
   std::istream &istrm = ifstrm.is_open() ? ifstrm : std::cin;
 
   std::ofstream ofstrm;
   if (argc > 2 && (strcmp(argv[2], "-") != 0)) {
-    ofstrm.open(argv[2]);
+    ofstrm.open(argv[2], std::ios_base::out | std::ios_base::binary);
     if (!ofstrm) {
       LOG(ERROR) << argv[0] << ": Open failed: " << argv[2];
       return 1;
     }
   }
+  if (!ofstrm.is_open()) {
+      _setmode(_fileno(stdout), _O_BINARY);
+  }
   std::ostream &ostrm = ofstrm.is_open() ? ofstrm : std::cout;
 
   ngram::NGramInput input(
diff --git a/src/bin/ngramread.cc b/src/bin/ngramread.cc
index e6f5d38..b9a4cb4 100644
--- a/src/bin/ngramread.cc
+++ b/src/bin/ngramread.cc
@@ -21,10 +21,10 @@ DEFINE_bool(renormalize_arpa, false,
             "model by normalizing the unigram state and recomputing the "
             "backoff weights.  Only used if --ARPA=true.");
 DEFINE_string(symbols, "", "Label symbol table");
+DEFINE_string(start_symbol, "<s>", "Start of sentence symbol");
+DEFINE_string(end_symbol, "</s>", "End of sentence symbol");
 DEFINE_string(epsilon_symbol, "<epsilon>", "Label for epsilon transitions");
 DEFINE_string(OOV_symbol, "<UNK>", "Class label for OOV symbols");
-DECLARE_string(start_symbol);  // defined in ngram-output.cc
-DECLARE_string(end_symbol);    // defined in ngram-output.cc
 
 int ngramread_main(int argc, char** argv);
 int main(int argc, char** argv) {
diff --git a/src/bin/ngramshrink-main.cc b/src/bin/ngramshrink-main.cc
index 8bbb21a..00c2443 100644
--- a/src/bin/ngramshrink-main.cc
+++ b/src/bin/ngramshrink-main.cc
@@ -63,7 +63,7 @@ int ngramshrink_main(int argc, char **argv) {
       LOG(WARNING) << "list_file parameter empty, no n-grams given";
       return 1;
     }
-    std::ifstream ifstrm(FST_FLAGS_list_file);
+    std::ifstream ifstrm(FST_FLAGS_list_file, std::ios_base::in | std::ios_base::binary);
     if (!ifstrm) {
       LOG(WARNING) << "NGramShrink: Can't open "
                    << FST_FLAGS_list_file << " for reading";
diff --git a/src/bin/ngramsymbols-main.cc b/src/bin/ngramsymbols-main.cc
index 2a47606..21f7035 100644
--- a/src/bin/ngramsymbols-main.cc
+++ b/src/bin/ngramsymbols-main.cc
@@ -16,6 +16,8 @@
 // Derives a symbol table from an input text corpus.
 
 #include <fstream>
+#include <io.h>
+#include <fcntl.h>
 #include <iostream>
 #include <string>
 
@@ -39,22 +41,28 @@ int ngramsymbols_main(int argc, char **argv) {
 
   std::ifstream ifstrm;
   if (argc > 1 && (strcmp(argv[1], "-") != 0)) {
-    ifstrm.open(argv[1]);
+    ifstrm.open(argv[1], std::ios_base::in | std::ios_base::binary);
     if (!ifstrm) {
       LOG(ERROR) << argv[0] << ": Open failed: " << argv[1];
       return 1;
     }
   }
+  if (!ifstrm.is_open()) {
+      _setmode(_fileno(stdin), _O_BINARY);
+  }
   std::istream &istrm = ifstrm.is_open() ? ifstrm : std::cin;
 
   std::ofstream ofstrm;
   if (argc > 2 && (strcmp(argv[2], "-") != 0)) {
-    ofstrm.open(argv[2]);
+    ofstrm.open(argv[2], std::ios_base::out | std::ios_base::binary);
     if (!ofstrm) {
       LOG(ERROR) << argv[0] << ": Open failed: " << argv[2];
       return 1;
     }
   }
+  if (!ofstrm.is_open()) {
+      _setmode(_fileno(stdout), _O_BINARY);
+  }
   std::ostream &ostrm = ofstrm.is_open() ? ofstrm : std::cout;
 
   ngram::NGramInput input(istrm, ostrm, /*symbols=*/"",
diff --git a/src/include/ngram/ngram-count.h b/src/include/ngram/ngram-count.h
index 57688f9..06cf4fb 100644
--- a/src/include/ngram/ngram-count.h
+++ b/src/include/ngram/ngram-count.h
@@ -30,6 +30,7 @@
 #include <ngram/ngram-count-of-counts.h>
 #include <ngram/ngram-model.h>
 #include <ngram/util.h>
+#include <ngram/ngram-output.h>
 #include <unordered_map>
 
 namespace ngram {
diff --git a/src/include/ngram/ngram-output.h b/src/include/ngram/ngram-output.h
index c136ddd..d384bc2 100644
--- a/src/include/ngram/ngram-output.h
+++ b/src/include/ngram/ngram-output.h
@@ -25,8 +25,13 @@
 #include <fst/compose.h>
 #include <ngram/ngram-context.h>
 #include <ngram/ngram-mutable-model.h>
+#include <fst/flags.h>
+#include <fst/exports/exports.h>
 #include <ngram/util.h>
 
+DECLARE_export_string(start_symbol, fst_EXPORT);
+DECLARE_export_string(end_symbol, fst_EXPORT);
+
 namespace ngram {
 
 static const int kSpecialLabel = -2;
diff --git a/src/include/ngram/ngram-randgen.h b/src/include/ngram/ngram-randgen.h
index a49d349..c0547b5 100644
--- a/src/include/ngram/ngram-randgen.h
+++ b/src/include/ngram/ngram-randgen.h
@@ -20,7 +20,12 @@
 #define NGRAM_NGRAM_RANDGEN_H_
 
 #include <sys/types.h>
+
+#ifdef _WIN32
+#include <io.h>         // for _get_osfhandle, _open
+#else
 #include <unistd.h>
+#endif  // _WIN32
 
 #include <vector>
 
diff --git a/src/lib/CMakeLists.txt b/src/lib/CMakeLists.txt
new file mode 100644
index 0000000..2069108
--- /dev/null
+++ b/src/lib/CMakeLists.txt
@@ -0,0 +1,65 @@
+
+
+add_library(ngram
+SHARED
+ngram-absolute.cc 
+ngram-context.cc
+ngram-count.cc
+ngram-count-prune.cc
+ngram-input.cc
+ngram-kneser-ney.cc
+ngram-list-prune.cc
+ngram-make.cc
+ngram-marginalize.cc
+ngram-output.cc
+ngram-shrink.cc
+util.cc
+)
+GENERATE_EXPORT_HEADER( ngram
+           BASE_NAME ngram
+           EXPORT_MACRO_NAME ngram_EXPORT
+           EXPORT_FILE_NAME ${CMAKE_BINARY_DIR}/include/ngram/ngram_Export.h
+           STATIC_DEFINE ngram_BUILT_AS_STATIC
+)
+set_target_properties(ngram PROPERTIES
+SOVERSION "${SOVERSION}"
+)
+target_include_directories(ngram PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
+                         $<INSTALL_INTERFACE:include>)
+target_include_directories(ngram PUBLIC $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/include>
+                         $<INSTALL_INTERFACE:include>)
+target_link_libraries(ngram fst fstscript fstlinearscript ${CMAKE_DL_LIBS})
+
+
+
+install(TARGETS ngram
+LIBRARY DESTINATION lib
+ARCHIVE DESTINATION lib
+RUNTIME DESTINATION bin
+)
+install(FILES
+${CMAKE_BINARY_DIR}/include/ngram/ngram_Export.h DESTINATION include/ngram
+)
+
+
+
+add_library(ngramhist
+SHARED
+hist-arc.cc
+)
+set_target_properties(ngramhist PROPERTIES
+SOVERSION "${SOVERSION}"
+)
+target_include_directories(ngramhist PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
+                         $<INSTALL_INTERFACE:include>)
+target_include_directories(ngramhist PUBLIC $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/include>
+                         $<INSTALL_INTERFACE:include>)
+target_link_libraries(ngramhist fst fstscript ${CMAKE_DL_LIBS})
+
+
+
+install(TARGETS ngramhist
+LIBRARY DESTINATION lib
+ARCHIVE DESTINATION lib
+RUNTIME DESTINATION bin
+)
\ No newline at end of file
diff --git a/src/lib/ngram-context.cc b/src/lib/ngram-context.cc
index f7e1de3..c148c85 100644
--- a/src/lib/ngram-context.cc
+++ b/src/lib/ngram-context.cc
@@ -25,6 +25,9 @@
 #include <ostream>
 #include <string>
 #include <vector>
+#include <io.h>
+#include <fcntl.h>
+#include <iostream>
 
 #include <fst/fst.h>
 
@@ -268,11 +271,14 @@ bool NGramReadContexts(const std::string &file,
                        std::vector<std::string> *contexts) {
   contexts->clear();
   std::ifstream fstrm;
-  fstrm.open(file);
+  fstrm.open(file, std::ios_base::in | std::ios_base::binary);
   if (!fstrm) {
     LOG(ERROR) << "NGramReadContexts: Can't open file: " << file;
     return false;
   }
+  if (!fstrm.is_open()) {
+      _setmode(_fileno(stdin), _O_BINARY);
+  }
   std::istream &strm = fstrm.is_open() ? fstrm : std::cin;
   std::string line;
   while (std::getline(strm, line)) contexts->push_back(line);
@@ -283,12 +289,15 @@ bool NGramWriteContexts(const std::string &file,
                         const std::vector<std::string> &contexts) {
   std::ofstream ofstrm;
   if (!file.empty()) {
-    ofstrm.open(file);
+    ofstrm.open(file, std::ios_base::out | std::ios_base::binary);
     if (!ofstrm) {
       LOG(ERROR) << "NGramWriteContexts: Can't create file: " << file;
       return false;
     }
   }
+  if (!ofstrm.is_open()) {
+      _setmode(_fileno(stdout), _O_BINARY);
+  }
   std::ostream &strm = ofstrm.is_open() ? ofstrm : std::cout;
   for (int i = 0; i < contexts.size(); ++i) strm << contexts[i] << std::endl;
   return true;
diff --git a/src/lib/ngram-output.cc b/src/lib/ngram-output.cc
index a38a98b..01b5d6a 100644
--- a/src/lib/ngram-output.cc
+++ b/src/lib/ngram-output.cc
@@ -26,9 +26,6 @@
 #include <fst/vector-fst.h>
 #include <ngram/util.h>
 
-DEFINE_string(start_symbol, "<s>", "Class label for sentence start");
-DEFINE_string(end_symbol, "</s>", "Class label for sentence end");
-
 namespace ngram {
 
 using fst::ArcIterator;
diff --git a/src/test/CMakeLists.txt b/src/test/CMakeLists.txt
new file mode 100644
index 0000000..9342abe
--- /dev/null
+++ b/src/test/CMakeLists.txt
@@ -0,0 +1,42 @@
+add_executable(ngramhisttest
+ngramhisttest.cc
+ngramhisttest-main.cc
+        )
+target_link_libraries(ngramhisttest fst fstfar fstscript ngram ngramhist ${CMAKE_DL_LIBS})
+set_target_properties(ngramhisttest PROPERTIES FOLDER test)
+if (MSVC)
+elseif (APPLE)
+        set_target_properties(ngramhisttest 
+                PROPERTIES 
+                        FOLDER test 
+                        ENVIRONMENT "DYLD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/src/lib;${CMAKE_INSTALL_PREFIX}/lib"
+        )
+else() 
+        set_target_properties(ngramhisttest 
+                PROPERTIES 
+                        FOLDER test 
+                        ENVIRONMENT "LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/src/lib;${CMAKE_INSTALL_PREFIX}/lib"
+        )
+endif()
+add_test(NAME ngramhisttest-test COMMAND ngramhisttest)
+
+add_executable(ngramrandtest
+ngramrandtest.cc
+ngramrandtest-main.cc
+        )
+target_link_libraries(ngramrandtest fst fstfar ngram ${CMAKE_DL_LIBS})
+if (MSVC)
+elseif (APPLE)
+        set_target_properties(ngramrandtest 
+                PROPERTIES 
+                        FOLDER test 
+                        ENVIRONMENT "DYLD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/src/lib;${CMAKE_INSTALL_PREFIX}/lib"
+        )
+else()
+        set_target_properties(ngramrandtest 
+                PROPERTIES 
+                        FOLDER test 
+                        ENVIRONMENT "LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/src/lib;${CMAKE_INSTALL_PREFIX}/lib"
+        )
+endif()
+add_test(NAME ngramrandtest-test COMMAND ngramrandtest)
\ No newline at end of file
diff --git a/src/test/disttestsetup.sh b/src/test/disttestsetup.sh
old mode 100755
new mode 100644
diff --git a/src/test/ngramapply_test.sh b/src/test/ngramapply_test.sh
old mode 100755
new mode 100644
diff --git a/src/test/ngramcount_histograms_test.sh b/src/test/ngramcount_histograms_test.sh
old mode 100755
new mode 100644
diff --git a/src/test/ngramcount_test.sh b/src/test/ngramcount_test.sh
old mode 100755
new mode 100644
diff --git a/src/test/ngramdistcount_test.sh b/src/test/ngramdistcount_test.sh
old mode 100755
new mode 100644
diff --git a/src/test/ngramdistmake_test.sh b/src/test/ngramdistmake_test.sh
old mode 100755
new mode 100644
diff --git a/src/test/ngramdistrand.sh b/src/test/ngramdistrand.sh
old mode 100755
new mode 100644
diff --git a/src/test/ngramdistshrink_test.sh b/src/test/ngramdistshrink_test.sh
old mode 100755
new mode 100644
diff --git a/src/test/ngramdistwittenbell_test.sh b/src/test/ngramdistwittenbell_test.sh
old mode 100755
new mode 100644
diff --git a/src/test/ngramfracdistmake_test.sh b/src/test/ngramfracdistmake_test.sh
old mode 100755
new mode 100644
diff --git a/src/test/ngramfracdistshrink_test.sh b/src/test/ngramfracdistshrink_test.sh
old mode 100755
new mode 100644
diff --git a/src/test/ngramhisttest-main.cc b/src/test/ngramhisttest-main.cc
index 51a006f..eb3f2d9 100644
--- a/src/test/ngramhisttest-main.cc
+++ b/src/test/ngramhisttest-main.cc
@@ -18,6 +18,9 @@
 
 #include <fstream>
 #include <istream>
+#include <io.h>
+#include <fcntl.h>
+#include <iostream>
 
 #include <fst/flags.h>
 #include <fst/log.h>
@@ -69,12 +72,15 @@ int ngramhisttest_main(int argc, char **argv) {
     if (!syms) return 1;
     std::unique_ptr<const fst::SymbolTable> ssyms;
     std::ifstream fstrm;
-    fstrm.open(FST_FLAGS_ifile);
+    fstrm.open(FST_FLAGS_ifile, std::ios_base::in | std::ios_base::binary);
     if (!fstrm) {
       LOG(ERROR) << argv[0]
                  << ": Open failed, file = " << FST_FLAGS_ifile;
       return 1;
     }
+    if (!fstrm.is_open()) {
+        _setmode(_fileno(stdin), _O_BINARY);
+    }
     std::istream &istrm = fstrm.is_open() ? fstrm : std::cin;
     fst::script::Compile(istrm, FST_FLAGS_ifile,
                              FST_FLAGS_ofile, "vector", "hist",
diff --git a/src/test/ngraminfo_test.sh b/src/test/ngraminfo_test.sh
old mode 100755
new mode 100644
diff --git a/src/test/ngrammake_test.sh b/src/test/ngrammake_test.sh
old mode 100755
new mode 100644
diff --git a/src/test/ngrammarginalize_test.sh b/src/test/ngrammarginalize_test.sh
old mode 100755
new mode 100644
diff --git a/src/test/ngrammerge_test.sh b/src/test/ngrammerge_test.sh
old mode 100755
new mode 100644
diff --git a/src/test/ngramperplexity_test.sh b/src/test/ngramperplexity_test.sh
old mode 100755
new mode 100644
diff --git a/src/test/ngramprint_test.sh b/src/test/ngramprint_test.sh
old mode 100755
new mode 100644
diff --git a/src/test/ngramrand_test.sh b/src/test/ngramrand_test.sh
old mode 100755
new mode 100644
diff --git a/src/test/ngramrandgen_test.sh b/src/test/ngramrandgen_test.sh
old mode 100755
new mode 100644
diff --git a/src/test/ngramrandtest-main.cc b/src/test/ngramrandtest-main.cc
index 7cd9945..e480a37 100644
--- a/src/test/ngramrandtest-main.cc
+++ b/src/test/ngramrandtest-main.cc
@@ -22,6 +22,9 @@
 #include <sstream>
 #include <string>
 #include <vector>
+#include <io.h>
+#include <fcntl.h>
+#include <iostream>
 
 #include <fst/extensions/far/far.h>
 #include <fst/fst.h>
@@ -212,13 +215,16 @@ int ngramrandtest_main(int argc, char **argv) {
 
   std::ofstream varfstrm;
   if (!FST_FLAGS_vars.empty()) {
-    varfstrm.open(FST_FLAGS_vars);
+    varfstrm.open(FST_FLAGS_vars, std::ios_base::out | std::ios_base::binary);
     if (!varfstrm) {
       LOG(ERROR) << argv[0]
                  << ": Open failed, file = " << FST_FLAGS_vars;
       return 1;
     }
   }
+  if (!varfstrm.is_open()) {
+      _setmode(_fileno(stdout), _O_BINARY);
+  }
   std::ostream &varstrm = varfstrm.is_open() ? varfstrm : std::cout;
 
   varstrm << "SEED=" << FST_FLAGS_seed << std::endl;
@@ -228,7 +234,7 @@ int ngramrandtest_main(int argc, char **argv) {
   std::string directory = directory_label(FST_FLAGS_seed,
                                           FST_FLAGS_directory);
   std::ofstream cntxfstrm;
-  cntxfstrm.open(directory + "cntxs");
+  cntxfstrm.open(directory + "cntxs", std::ios_base::out | std::ios_base::binary);
   if (!cntxfstrm) {
     LOG(ERROR) << argv[0] << ": Open failed, file = " << directory << "cntxs";
     return 1;
diff --git a/src/test/ngramrandtest.cc b/src/test/ngramrandtest.cc
index febcfb7..f2f89b2 100644
--- a/src/test/ngramrandtest.cc
+++ b/src/test/ngramrandtest.cc
@@ -13,7 +13,12 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 //
+
+#ifdef _WIN32
+#include <io.h>         // for _get_osfhandle, _open
+#else
 #include <unistd.h>
+#endif  // _WIN32
 
 #include <fst/flags.h>
 
diff --git a/src/test/ngramshrink_test.sh b/src/test/ngramshrink_test.sh
old mode 100755
new mode 100644
diff --git a/src/test/ngramsymbols_test.sh b/src/test/ngramsymbols_test.sh
old mode 100755
new mode 100644
-- 
2.35.3

