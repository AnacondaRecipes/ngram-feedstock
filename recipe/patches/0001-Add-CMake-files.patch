From 54fafad3fd0e3aac037cf4c5a9ab7a727ae949ff Mon Sep 17 00:00:00 2001
From: Michael McAuliffe <michael.e.mcauliffe@gmail.com>
Date: Sat, 16 Jul 2022 11:39:26 -0700
Subject: [PATCH] Add CMake files

---
 CMakeLists.txt                    | 34 ++++++++++++++++
 src/CMakeLists.txt                | 11 ++++++
 src/bin/CMakeLists.txt            | 53 +++++++++++++++++++++++++
 src/bin/ngramapply-main.cc        |  2 +-
 src/bin/ngramcontext-main.cc      |  4 +-
 src/bin/ngramcount-main.cc        | 28 ++++++-------
 src/bin/ngraminfo-main.cc         |  4 +-
 src/bin/ngrammake-main.cc         | 20 +++++-----
 src/bin/ngrammarginalize-main.cc  |  8 ++--
 src/bin/ngrammerge-main.cc        | 26 ++++++-------
 src/bin/ngramperplexity-main.cc   | 10 ++---
 src/bin/ngramprint-main.cc        | 20 +++++-----
 src/bin/ngramrandgen-main.cc      | 17 +++++---
 src/bin/ngramrandgen.cc           |  5 +++
 src/bin/ngramread-main.cc         | 12 +++---
 src/bin/ngramread.cc              |  2 -
 src/bin/ngramshrink-main.cc       | 26 ++++++-------
 src/bin/ngramsort-main.cc         |  6 +--
 src/bin/ngramsplit-main.cc        | 12 +++---
 src/bin/ngramsymbols-main.cc      |  4 +-
 src/bin/ngramtransfer-main.cc     | 20 +++++-----
 src/include/ngram/ngram-count.h   |  1 +
 src/include/ngram/ngram-output.h  |  4 ++
 src/include/ngram/ngram-randgen.h |  5 +++
 src/include/ngram/util.h          |  2 +-
 src/lib/CMakeLists.txt            | 65 +++++++++++++++++++++++++++++++
 src/test/CMakeLists.txt           | 15 +++++++
 src/test/ngramhisttest-main.cc    | 10 ++---
 src/test/ngramrandtest-main.cc    | 18 ++++-----
 src/test/ngramrandtest.cc         |  5 +++
 30 files changed, 324 insertions(+), 125 deletions(-)
 create mode 100644 CMakeLists.txt
 create mode 100644 src/CMakeLists.txt
 create mode 100644 src/bin/CMakeLists.txt
 create mode 100644 src/lib/CMakeLists.txt
 create mode 100644 src/test/CMakeLists.txt

diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..34cd009
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,34 @@
+project(ngram)
+cmake_minimum_required(VERSION 3.18)
+
+include(GNUInstallDirs)
+include(GenerateExportHeader)
+set(CMAKE_MACOSX_RPATH 1)
+set(CMAKE_CXX_STANDARD 17)
+set(CMAKE_CXX_EXTENSIONS OFF)
+option(BUILD_SHARED_LIBS "Build shared libraries" ON)
+option(NGRAM_BUILD_TEST "Build ngram tests" ON)
+
+set(CMAKE_POSITION_INDEPENDENT_CODE ON)
+if (MSVC)
+    find_package(dlfcn-win32 REQUIRED)
+    set(CMAKE_DL_LIBS dlfcn-win32::dl)
+    set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
+    add_definitions(-DWIN32_LEAN_AND_MEAN)
+    add_definitions(-DNOMINMAX)
+    add_definitions(-D_SILENCE_ALL_CXX17_DEPRECATION_WARNINGS)
+    add_definitions(-D_USE_MATH_DEFINES)
+    add_compile_options(/permissive- /FS /wd4819 /EHsc /bigobj)
+
+    # some warnings related with fst
+    add_compile_options(/wd4018 /wd4244 /wd4267 /wd4291 /wd4305)
+endif (MSVC)
+
+set(SOVERSION "1314")
+
+if (NGRAM_BUILD_TEST)
+    include(CTest)
+    enable_testing()
+endif()
+
+add_subdirectory(src)
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
new file mode 100644
index 0000000..c8c3d8d
--- /dev/null
+++ b/src/CMakeLists.txt
@@ -0,0 +1,11 @@
+include_directories(./include/)
+install(DIRECTORY include/ DESTINATION include/
+        FILES_MATCHING PATTERN "*.h")
+
+add_subdirectory(lib)
+
+add_subdirectory(bin)
+
+if (${NGRAM_BUILD_TEST})
+add_subdirectory(test)
+endif()
\ No newline at end of file
diff --git a/src/bin/CMakeLists.txt b/src/bin/CMakeLists.txt
new file mode 100644
index 0000000..c13e6c3
--- /dev/null
+++ b/src/bin/CMakeLists.txt
@@ -0,0 +1,53 @@
+function (add_executable2 _name)
+    add_executable(${ARGV})
+    if (TARGET ${_name})
+        target_link_libraries(${_name} ngram fstfarscript fstfar fstscriptutils fstscript fst ${CMAKE_DL_LIBS})
+        set_target_properties(${_name} PROPERTIES FOLDER bin)
+    endif()
+
+    install(TARGETS ${_name} RUNTIME DESTINATION bin)
+endfunction()
+
+function (add_executable2_hist _name)
+    add_executable(${ARGV})
+    if (TARGET ${_name})
+        target_link_libraries(${_name} ngramhist ngram fstfarscript fstfar fstscriptutils fstscript fst ${CMAKE_DL_LIBS})
+        set_target_properties(${_name} PROPERTIES FOLDER bin)
+    endif()
+
+    install(TARGETS ${_name} RUNTIME DESTINATION bin)
+endfunction()
+
+include_directories(../include)
+
+add_executable2(ngramapply ngramapply-main.cc ngramapply.cc)
+
+add_executable2(ngramcontext ngramcontext-main.cc ngramcontext.cc)
+
+add_executable2_hist(ngramcount ngramcount-main.cc ngramcount.cc)
+
+add_executable2(ngraminfo ngraminfo-main.cc ngraminfo.cc)
+
+add_executable2_hist(ngrammake ngrammake-main.cc ngrammake.cc)
+
+add_executable2(ngrammarginalize ngrammarginalize-main.cc ngrammarginalize.cc)
+
+add_executable2_hist(ngrammerge ngrammerge-main.cc ngrammerge.cc)
+
+add_executable2(ngramperplexity ngramperplexity-main.cc ngramperplexity.cc)
+
+add_executable2(ngramprint ngramprint-main.cc ngramprint.cc)
+
+add_executable2(ngramrandgen ngramrandgen-main.cc ngramrandgen.cc)
+
+add_executable2(ngramread ngramread-main.cc ngramread.cc)
+
+add_executable2(ngramshrink ngramshrink-main.cc ngramshrink.cc)
+
+add_executable2(ngramsort ngramsort-main.cc ngramsort.cc)
+
+add_executable2_hist(ngramsplit ngramsplit-main.cc ngramsplit.cc)
+
+add_executable2(ngramsymbols ngramsymbols-main.cc ngramsymbols.cc)
+
+add_executable2_hist(ngramtransfer ngramtransfer-main.cc ngramtransfer.cc)
diff --git a/src/bin/ngramapply-main.cc b/src/bin/ngramapply-main.cc
index 7e9a22c..311ddfa 100644
--- a/src/bin/ngramapply-main.cc
+++ b/src/bin/ngramapply-main.cc
@@ -24,7 +24,7 @@
 #include <ngram/lexicographic-map.h>
 #include <ngram/ngram-output.h>
 
-DECLARE_string(bo_arc_type);
+DECLARE_EXE_string(bo_arc_type);
 
 enum BACKOFF_TYPE { PHI, EPS, LEX_EPS };
 
diff --git a/src/bin/ngramcontext-main.cc b/src/bin/ngramcontext-main.cc
index 9680157..6fc8479 100644
--- a/src/bin/ngramcontext-main.cc
+++ b/src/bin/ngramcontext-main.cc
@@ -24,8 +24,8 @@
 #include <ngram/ngram-context.h>
 #include <ngram/ngram-model.h>
 
-DECLARE_int64(contexts);
-DECLARE_double(bigram_threshold);
+DECLARE_EXE_int64(contexts);
+DECLARE_EXE_double(bigram_threshold);
 
 int ngramcontext_main(int argc, char **argv) {
   std::string usage = "Generates a context set from an input LM.\n\n  Usage: ";
diff --git a/src/bin/ngramcount-main.cc b/src/bin/ngramcount-main.cc
index 9a8010d..6683d3b 100644
--- a/src/bin/ngramcount-main.cc
+++ b/src/bin/ngramcount-main.cc
@@ -30,28 +30,28 @@
 #include <ngram/ngram-count.h>
 #include <ngram/ngram-model.h>
 
-DECLARE_string(method);
-DECLARE_int64(order);
+DECLARE_EXE_string(method);
+DECLARE_EXE_int64(order);
 
 // For counting:
-DECLARE_bool(round_to_int);
-DECLARE_bool(output_fst);
-DECLARE_bool(require_symbols);
-DECLARE_double(add_to_symbol_unigram_count);
+DECLARE_EXE_bool(round_to_int);
+DECLARE_EXE_bool(output_fst);
+DECLARE_EXE_bool(require_symbols);
+DECLARE_EXE_double(add_to_symbol_unigram_count);
 
 // For counting and histograms:
-DECLARE_bool(epsilon_as_backoff);
+DECLARE_EXE_bool(epsilon_as_backoff);
 
 // For count-of-counting:
-DECLARE_string(context_pattern);
+DECLARE_EXE_string(context_pattern);
 
 // For merging:
-DECLARE_double(alpha);
-DECLARE_double(beta);
-DECLARE_bool(normalize);
-DECLARE_int64(backoff_label);
-DECLARE_double(norm_eps);
-DECLARE_bool(check_consistency);
+DECLARE_EXE_double(alpha);
+DECLARE_EXE_double(beta);
+DECLARE_EXE_bool(normalize);
+DECLARE_EXE_int64(backoff_label);
+DECLARE_EXE_double(norm_eps);
+DECLARE_EXE_bool(check_consistency);
 
 int ngramcount_main(int argc, char **argv) {
   std::string usage = "Count n-grams from input file.\n\n  Usage: ";
diff --git a/src/bin/ngraminfo-main.cc b/src/bin/ngraminfo-main.cc
index 5573f7d..e900dba 100644
--- a/src/bin/ngraminfo-main.cc
+++ b/src/bin/ngraminfo-main.cc
@@ -27,8 +27,8 @@
 #include <ngram/ngram-model.h>
 #include <ngram/util.h>
 
-DECLARE_bool(check_consistency);
-DECLARE_double(norm_eps);
+DECLARE_EXE_bool(check_consistency);
+DECLARE_EXE_double(norm_eps);
 
 namespace ngram {
 
diff --git a/src/bin/ngrammake-main.cc b/src/bin/ngrammake-main.cc
index 503e172..fa42025 100644
--- a/src/bin/ngrammake-main.cc
+++ b/src/bin/ngrammake-main.cc
@@ -22,16 +22,16 @@
 #include <ngram/hist-arc.h>
 #include <ngram/ngram-make.h>
 
-DECLARE_double(witten_bell_k);
-DECLARE_double(discount_D);
-DECLARE_string(method);
-DECLARE_bool(backoff);
-DECLARE_bool(interpolate);
-DECLARE_int64(bins);
-DECLARE_int64(backoff_label);
-DECLARE_double(norm_eps);
-DECLARE_bool(check_consistency);
-DECLARE_string(count_of_counts);
+DECLARE_EXE_double(witten_bell_k);
+DECLARE_EXE_double(discount_D);
+DECLARE_EXE_string(method);
+DECLARE_EXE_bool(backoff);
+DECLARE_EXE_bool(interpolate);
+DECLARE_EXE_int64(bins);
+DECLARE_EXE_int64(backoff_label);
+DECLARE_EXE_double(norm_eps);
+DECLARE_EXE_bool(check_consistency);
+DECLARE_EXE_string(count_of_counts);
 
 int ngrammake_main(int argc, char **argv) {
   std::string usage = "Make n-gram model from input count file.\n\n  Usage: ";
diff --git a/src/bin/ngrammarginalize-main.cc b/src/bin/ngrammarginalize-main.cc
index a1ffb78..95bb3ef 100644
--- a/src/bin/ngrammarginalize-main.cc
+++ b/src/bin/ngrammarginalize-main.cc
@@ -24,10 +24,10 @@
 #include <ngram/ngram-marginalize.h>
 #include <ngram/util.h>
 
-DECLARE_int64(backoff_label);
-DECLARE_int32(max_bo_updates);
-DECLARE_double(norm_eps);
-DECLARE_bool(check_consistency);
+DECLARE_EXE_int64(backoff_label);
+DECLARE_EXE_int32(max_bo_updates);
+DECLARE_EXE_double(norm_eps);
+DECLARE_EXE_bool(check_consistency);
 
 int ngrammarginalize_main(int argc, char **argv) {
   std::string usage =
diff --git a/src/bin/ngrammerge-main.cc b/src/bin/ngrammerge-main.cc
index 804fb60..7493c2c 100644
--- a/src/bin/ngrammerge-main.cc
+++ b/src/bin/ngrammerge-main.cc
@@ -29,19 +29,19 @@
 #include <ngram/ngram-model-merge.h>
 #include <ngram/ngram-replace-merge.h>
 
-DECLARE_double(alpha);
-DECLARE_double(beta);
-DECLARE_string(context_pattern);
-DECLARE_string(contexts);
-DECLARE_bool(normalize);
-DECLARE_string(method);
-DECLARE_int32(max_replace_order);
-DECLARE_string(ofile);
-DECLARE_int64(backoff_label);
-DECLARE_double(norm_eps);
-DECLARE_bool(check_consistency);
-DECLARE_bool(complete);
-DECLARE_bool(round_to_int);
+DECLARE_EXE_double(alpha);
+DECLARE_EXE_double(beta);
+DECLARE_EXE_string(context_pattern);
+DECLARE_EXE_string(contexts);
+DECLARE_EXE_bool(normalize);
+DECLARE_EXE_string(method);
+DECLARE_EXE_int32(max_replace_order);
+DECLARE_EXE_string(ofile);
+DECLARE_EXE_int64(backoff_label);
+DECLARE_EXE_double(norm_eps);
+DECLARE_EXE_bool(check_consistency);
+DECLARE_EXE_bool(complete);
+DECLARE_EXE_bool(round_to_int);
 
 namespace {
 
diff --git a/src/bin/ngramperplexity-main.cc b/src/bin/ngramperplexity-main.cc
index 08a0ee3..2a9d1d8 100644
--- a/src/bin/ngramperplexity-main.cc
+++ b/src/bin/ngramperplexity-main.cc
@@ -25,11 +25,11 @@
 #include <fst/extensions/far/far.h>
 #include <ngram/ngram-output.h>
 
-DECLARE_bool(use_phimatcher);
-DECLARE_string(OOV_symbol);
-DECLARE_double(OOV_class_size);
-DECLARE_double(OOV_probability);
-DECLARE_string(context_pattern);
+DECLARE_EXE_bool(use_phimatcher);
+DECLARE_EXE_string(OOV_symbol);
+DECLARE_EXE_double(OOV_class_size);
+DECLARE_EXE_double(OOV_probability);
+DECLARE_EXE_string(context_pattern);
 
 int ngramperplexity_main(int argc, char **argv) {
   std::string usage = "Apply n-gram model to input FST archive.\n\n  Usage: ";
diff --git a/src/bin/ngramprint-main.cc b/src/bin/ngramprint-main.cc
index 20c0bd3..b75c31b 100644
--- a/src/bin/ngramprint-main.cc
+++ b/src/bin/ngramprint-main.cc
@@ -23,16 +23,16 @@
 #include <fst/flags.h>
 #include <ngram/ngram-output.h>
 
-DECLARE_bool(ARPA);
-DECLARE_bool(backoff);
-DECLARE_bool(backoff_inline);
-DECLARE_bool(negativelogs);
-DECLARE_bool(integers);
-DECLARE_int64(backoff_label);
-DECLARE_bool(check_consistency);
-DECLARE_string(context_pattern);
-DECLARE_bool(include_all_suffixes);
-DECLARE_string(symbols);
+DECLARE_EXE_bool(ARPA);
+DECLARE_EXE_bool(backoff);
+DECLARE_EXE_bool(backoff_inline);
+DECLARE_EXE_bool(negativelogs);
+DECLARE_EXE_bool(integers);
+DECLARE_EXE_int64(backoff_label);
+DECLARE_EXE_bool(check_consistency);
+DECLARE_EXE_string(context_pattern);
+DECLARE_EXE_bool(include_all_suffixes);
+DECLARE_EXE_string(symbols);
 
 int ngramprint_main(int argc, char **argv) {
   std::string usage = "Print n-gram counts and models.\n\n  Usage: ";
diff --git a/src/bin/ngramrandgen-main.cc b/src/bin/ngramrandgen-main.cc
index 6f5f80e..5f04be3 100644
--- a/src/bin/ngramrandgen-main.cc
+++ b/src/bin/ngramrandgen-main.cc
@@ -16,7 +16,12 @@
 // Generates random sentences from an LM or more generally paths through any
 // FST where epsilons are treated as failure transitions.
 
+
+#ifdef _WIN32
+#include <io.h>         // for _get_osfhandle, _open
+#else
 #include <unistd.h>
+#endif  // _WIN32
 
 #include <cstdlib>
 #include <memory>
@@ -32,12 +37,12 @@
 #include <fst/vector-fst.h>
 #include <ngram/ngram-randgen.h>
 
-DECLARE_int32(max_length);
-DECLARE_int64(max_sents);
-DECLARE_int32(seed);
-DECLARE_bool(remove_epsilon);
-DECLARE_bool(weighted);
-DECLARE_bool(remove_total_weight);
+DECLARE_EXE_int32(max_length);
+DECLARE_EXE_int64(max_sents);
+DECLARE_EXE_int32(seed);
+DECLARE_EXE_bool(remove_epsilon);
+DECLARE_EXE_bool(weighted);
+DECLARE_EXE_bool(remove_total_weight);
 
 namespace {
 
diff --git a/src/bin/ngramrandgen.cc b/src/bin/ngramrandgen.cc
index 8689bee..b1df7b7 100644
--- a/src/bin/ngramrandgen.cc
+++ b/src/bin/ngramrandgen.cc
@@ -13,7 +13,12 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 //
+
+#ifdef _WIN32
+#include <io.h>         // for _get_osfhandle, _open
+#else
 #include <unistd.h>
+#endif  // _WIN32
 
 #include <climits>
 
diff --git a/src/bin/ngramread-main.cc b/src/bin/ngramread-main.cc
index b8933e4..9a38578 100644
--- a/src/bin/ngramread-main.cc
+++ b/src/bin/ngramread-main.cc
@@ -22,13 +22,11 @@
 #include <fst/flags.h>
 #include <ngram/ngram-input.h>
 
-DECLARE_bool(ARPA);
-DECLARE_bool(renormalize_arpa);
-DECLARE_string(symbols);
-DECLARE_string(epsilon_symbol);
-DECLARE_string(OOV_symbol);
-DECLARE_string(start_symbol);  // defined in ngram-output.cc
-DECLARE_string(end_symbol);    // defined in ngram-output.cc
+DECLARE_EXE_bool(ARPA);
+DECLARE_EXE_bool(renormalize_arpa);
+DECLARE_EXE_string(symbols);
+DECLARE_EXE_string(epsilon_symbol);
+DECLARE_EXE_string(OOV_symbol);
 
 int ngramread_main(int argc, char **argv) {
   std::string usage = "Transform text formats to FST.\n\n  Usage: ";
diff --git a/src/bin/ngramread.cc b/src/bin/ngramread.cc
index e6f5d38..4e08f07 100644
--- a/src/bin/ngramread.cc
+++ b/src/bin/ngramread.cc
@@ -23,8 +23,6 @@ DEFINE_bool(renormalize_arpa, false,
 DEFINE_string(symbols, "", "Label symbol table");
 DEFINE_string(epsilon_symbol, "<epsilon>", "Label for epsilon transitions");
 DEFINE_string(OOV_symbol, "<UNK>", "Class label for OOV symbols");
-DECLARE_string(start_symbol);  // defined in ngram-output.cc
-DECLARE_string(end_symbol);    // defined in ngram-output.cc
 
 int ngramread_main(int argc, char** argv);
 int main(int argc, char** argv) {
diff --git a/src/bin/ngramshrink-main.cc b/src/bin/ngramshrink-main.cc
index 8bbb21a..218149d 100644
--- a/src/bin/ngramshrink-main.cc
+++ b/src/bin/ngramshrink-main.cc
@@ -23,19 +23,19 @@
 #include <ngram/ngram-list-prune.h>
 #include <ngram/ngram-shrink.h>
 
-DECLARE_double(total_unigram_count);
-DECLARE_double(theta);
-DECLARE_int64(target_number_of_ngrams);
-DECLARE_int32(min_order_to_prune);
-DECLARE_string(method);
-DECLARE_string(list_file);
-DECLARE_string(count_pattern);
-DECLARE_string(context_pattern);
-DECLARE_int32(shrink_opt);
-DECLARE_int64(backoff_label);
-DECLARE_double(norm_eps);
-DECLARE_bool(check_consistency);
-DECLARE_bool(retry_downcase);
+DECLARE_EXE_double(total_unigram_count);
+DECLARE_EXE_double(theta);
+DECLARE_EXE_int64(target_number_of_ngrams);
+DECLARE_EXE_int32(min_order_to_prune);
+DECLARE_EXE_string(method);
+DECLARE_EXE_string(list_file);
+DECLARE_EXE_string(count_pattern);
+DECLARE_EXE_string(context_pattern);
+DECLARE_EXE_int32(shrink_opt);
+DECLARE_EXE_int64(backoff_label);
+DECLARE_EXE_double(norm_eps);
+DECLARE_EXE_bool(check_consistency);
+DECLARE_EXE_bool(retry_downcase);
 
 int ngramshrink_main(int argc, char **argv) {
   std::string usage = "Shrink n-gram model from input model file.\n\n  Usage: ";
diff --git a/src/bin/ngramsort-main.cc b/src/bin/ngramsort-main.cc
index 035dcd0..f5888ed 100644
--- a/src/bin/ngramsort-main.cc
+++ b/src/bin/ngramsort-main.cc
@@ -21,9 +21,9 @@
 #include <fst/flags.h>
 #include <ngram/ngram-mutable-model.h>
 
-DECLARE_bool(check_consistency);
-DECLARE_int64(backoff_label);
-DECLARE_double(norm_eps);
+DECLARE_EXE_bool(check_consistency);
+DECLARE_EXE_int64(backoff_label);
+DECLARE_EXE_double(norm_eps);
 
 int ngramsort_main(int argc, char **argv) {
   std::string usage =
diff --git a/src/bin/ngramsplit-main.cc b/src/bin/ngramsplit-main.cc
index 7cf4ab5..5d163cc 100644
--- a/src/bin/ngramsplit-main.cc
+++ b/src/bin/ngramsplit-main.cc
@@ -26,12 +26,12 @@
 #include <ngram/ngram-complete.h>
 #include <ngram/ngram-split.h>
 
-DECLARE_int64(backoff_label);
-DECLARE_string(contexts);
-DECLARE_string(method);
-DECLARE_double(norm_eps);
-DECLARE_bool(complete);
-DECLARE_string(far_type);
+DECLARE_EXE_int64(backoff_label);
+DECLARE_EXE_string(contexts);
+DECLARE_EXE_string(method);
+DECLARE_EXE_double(norm_eps);
+DECLARE_EXE_bool(complete);
+DECLARE_EXE_string(far_type);
 
 namespace {
 
diff --git a/src/bin/ngramsymbols-main.cc b/src/bin/ngramsymbols-main.cc
index 2a47606..e5619a6 100644
--- a/src/bin/ngramsymbols-main.cc
+++ b/src/bin/ngramsymbols-main.cc
@@ -22,8 +22,8 @@
 #include <fst/flags.h>
 #include <ngram/ngram-input.h>
 
-DECLARE_string(epsilon_symbol);
-DECLARE_string(OOV_symbol);
+DECLARE_EXE_string(epsilon_symbol);
+DECLARE_EXE_string(OOV_symbol);
 
 int ngramsymbols_main(int argc, char **argv) {
   std::string usage = "Derives a symbol table from a corpus.\n\n  Usage: ";
diff --git a/src/bin/ngramtransfer-main.cc b/src/bin/ngramtransfer-main.cc
index a058073..6af7e07 100644
--- a/src/bin/ngramtransfer-main.cc
+++ b/src/bin/ngramtransfer-main.cc
@@ -24,16 +24,16 @@
 #include <ngram/ngram-complete.h>
 #include <ngram/ngram-transfer.h>
 
-DECLARE_int64(backoff_label);
-DECLARE_string(context_pattern1);
-DECLARE_string(context_pattern2);
-DECLARE_string(contexts);
-DECLARE_string(ofile);
-DECLARE_string(method);
-DECLARE_int32(index);
-DECLARE_bool(transfer_from);
-DECLARE_bool(normalize);
-DECLARE_bool(complete);
+DECLARE_EXE_int64(backoff_label);
+DECLARE_EXE_string(context_pattern1);
+DECLARE_EXE_string(context_pattern2);
+DECLARE_EXE_string(contexts);
+DECLARE_EXE_string(ofile);
+DECLARE_EXE_string(method);
+DECLARE_EXE_int32(index);
+DECLARE_EXE_bool(transfer_from);
+DECLARE_EXE_bool(normalize);
+DECLARE_EXE_bool(complete);
 
 namespace {
 
diff --git a/src/include/ngram/ngram-count.h b/src/include/ngram/ngram-count.h
index 57688f9..06cf4fb 100644
--- a/src/include/ngram/ngram-count.h
+++ b/src/include/ngram/ngram-count.h
@@ -30,6 +30,7 @@
 #include <ngram/ngram-count-of-counts.h>
 #include <ngram/ngram-model.h>
 #include <ngram/util.h>
+#include <ngram/ngram-output.h>
 #include <unordered_map>
 
 namespace ngram {
diff --git a/src/include/ngram/ngram-output.h b/src/include/ngram/ngram-output.h
index c136ddd..f990c3e 100644
--- a/src/include/ngram/ngram-output.h
+++ b/src/include/ngram/ngram-output.h
@@ -25,8 +25,12 @@
 #include <fst/compose.h>
 #include <ngram/ngram-context.h>
 #include <ngram/ngram-mutable-model.h>
+#include <fst/flags.h>
 #include <ngram/util.h>
 
+DECLARE_string(start_symbol);
+DECLARE_string(end_symbol);
+
 namespace ngram {
 
 static const int kSpecialLabel = -2;
diff --git a/src/include/ngram/ngram-randgen.h b/src/include/ngram/ngram-randgen.h
index a49d349..c0547b5 100644
--- a/src/include/ngram/ngram-randgen.h
+++ b/src/include/ngram/ngram-randgen.h
@@ -20,7 +20,12 @@
 #define NGRAM_NGRAM_RANDGEN_H_
 
 #include <sys/types.h>
+
+#ifdef _WIN32
+#include <io.h>         // for _get_osfhandle, _open
+#else
 #include <unistd.h>
+#endif  // _WIN32
 
 #include <vector>
 
diff --git a/src/include/ngram/util.h b/src/include/ngram/util.h
index ea6cb0c..a383a5c 100644
--- a/src/include/ngram/util.h
+++ b/src/include/ngram/util.h
@@ -21,7 +21,7 @@
 
 // UTILITY FOR ERROR HANDLING
 
-DECLARE_bool(ngram_error_fatal);
+DECLARE_EXE_bool(ngram_error_fatal);
 
 #define NGRAMERROR()                                                     \
   LOG(LEVEL(FST_FLAGS_ngram_error_fatal ? base_logging::FATAL \
diff --git a/src/lib/CMakeLists.txt b/src/lib/CMakeLists.txt
new file mode 100644
index 0000000..126b8f7
--- /dev/null
+++ b/src/lib/CMakeLists.txt
@@ -0,0 +1,65 @@
+
+
+add_library(ngram
+SHARED
+ngram-absolute.cc 
+ngram-context.cc
+ngram-count.cc
+ngram-count-prune.cc
+ngram-input.cc
+ngram-kneser-ney.cc
+ngram-list-prune.cc
+ngram-make.cc
+ngram-marginalize.cc
+ngram-output.cc
+ngram-shrink.cc
+util.cc
+)
+GENERATE_EXPORT_HEADER( ngram
+           BASE_NAME ngram
+           EXPORT_MACRO_NAME ngram_EXPORT
+           EXPORT_FILE_NAME ${CMAKE_BINARY_DIR}/include/ngram/ngram_Export.h
+           STATIC_DEFINE ngram_BUILT_AS_STATIC
+)
+set_target_properties(ngram PROPERTIES
+SOVERSION "${SOVERSION}"
+)
+target_include_directories(ngram PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
+                         $<INSTALL_INTERFACE:include>)
+target_include_directories(ngram PUBLIC $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/include>
+                         $<INSTALL_INTERFACE:include>)
+target_link_libraries(ngram fst ${CMAKE_DL_LIBS})
+
+
+
+install(TARGETS ngram
+LIBRARY DESTINATION lib
+ARCHIVE DESTINATION lib
+RUNTIME DESTINATION bin
+)
+install(FILES
+${CMAKE_BINARY_DIR}/include/ngram/ngram_Export.h DESTINATION include/ngram
+)
+
+
+
+add_library(ngramhist
+SHARED
+hist-arc.cc
+)
+set_target_properties(ngramhist PROPERTIES
+SOVERSION "${SOVERSION}"
+)
+target_include_directories(ngramhist PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
+                         $<INSTALL_INTERFACE:include>)
+target_include_directories(ngramhist PUBLIC $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/include>
+                         $<INSTALL_INTERFACE:include>)
+target_link_libraries(ngramhist fst fstscriptutils fstscript ${CMAKE_DL_LIBS})
+
+
+
+install(TARGETS ngramhist
+LIBRARY DESTINATION lib
+ARCHIVE DESTINATION lib
+RUNTIME DESTINATION bin
+)
\ No newline at end of file
diff --git a/src/test/CMakeLists.txt b/src/test/CMakeLists.txt
new file mode 100644
index 0000000..2a770d0
--- /dev/null
+++ b/src/test/CMakeLists.txt
@@ -0,0 +1,15 @@
+add_executable(ngramhisttest
+ngramhisttest.cc
+ngramhisttest-main.cc
+        )
+target_link_libraries(ngramhisttest fst fstfar fstscriptutils fstscript ngram ngramhist ${CMAKE_DL_LIBS})
+set_target_properties(ngramhisttest PROPERTIES FOLDER test)
+add_test(NAME ngramhisttest-test COMMAND ngramhisttest)
+
+add_executable(ngramrandtest
+ngramrandtest.cc
+ngramrandtest-main.cc
+        )
+target_link_libraries(ngramrandtest fst fstfar ngram ${CMAKE_DL_LIBS})
+set_target_properties(ngramrandtest PROPERTIES FOLDER test)
+add_test(NAME ngramrandtest-test COMMAND ngramrandtest)
\ No newline at end of file
diff --git a/src/test/ngramhisttest-main.cc b/src/test/ngramhisttest-main.cc
index 51a006f..57833c0 100644
--- a/src/test/ngramhisttest-main.cc
+++ b/src/test/ngramhisttest-main.cc
@@ -24,11 +24,11 @@
 #include <fst/script/compile.h>
 #include <fst/script/equal.h>
 
-DECLARE_double(delta);
-DECLARE_string(ifile);
-DECLARE_string(syms);
-DECLARE_string(cfile);
-DECLARE_string(ofile);
+DECLARE_EXE_double(delta);
+DECLARE_EXE_string(ifile);
+DECLARE_EXE_string(syms);
+DECLARE_EXE_string(cfile);
+DECLARE_EXE_string(ofile);
 
 int ngramhisttest_main(int argc, char **argv) {
   using fst::script::FstClass;
diff --git a/src/test/ngramrandtest-main.cc b/src/test/ngramrandtest-main.cc
index 7cd9945..1ee39fa 100644
--- a/src/test/ngramrandtest-main.cc
+++ b/src/test/ngramrandtest-main.cc
@@ -43,15 +43,15 @@
 #include <ngram/ngram-shrink.h>
 #include <ngram/ngram-witten-bell.h>
 
-DECLARE_int32(max_length);
-DECLARE_int32(seed);
-DECLARE_int32(vocabulary_max);
-DECLARE_int32(mean_length);
-DECLARE_int32(sample_max);
-DECLARE_int32(ngram_max);
-DECLARE_string(directory);
-DECLARE_string(vars);
-DECLARE_double(thresh_max);
+DECLARE_EXE_int32(max_length);
+DECLARE_EXE_int32(seed);
+DECLARE_EXE_int32(vocabulary_max);
+DECLARE_EXE_int32(mean_length);
+DECLARE_EXE_int32(sample_max);
+DECLARE_EXE_int32(ngram_max);
+DECLARE_EXE_string(directory);
+DECLARE_EXE_string(vars);
+DECLARE_EXE_double(thresh_max);
 
 namespace {
 
diff --git a/src/test/ngramrandtest.cc b/src/test/ngramrandtest.cc
index febcfb7..f2f89b2 100644
--- a/src/test/ngramrandtest.cc
+++ b/src/test/ngramrandtest.cc
@@ -13,7 +13,12 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 //
+
+#ifdef _WIN32
+#include <io.h>         // for _get_osfhandle, _open
+#else
 #include <unistd.h>
+#endif  // _WIN32
 
 #include <fst/flags.h>
 
-- 
2.35.3

